{
    "event": "suiteStart",
    "suite": "Money Test Suite",
    "tests": 18
}{
    "event": "suiteStart",
    "suite": "Tests\\Money\\MoneyTest",
    "tests": 3
}{
    "event": "testStart",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testFactoryMethods"
}{
    "event": "test",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testFactoryMethods",
    "status": "pass",
    "time": 0.051446914672852,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testJsonEncoding"
}{
    "event": "test",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testJsonEncoding",
    "status": "pass",
    "time": 0.00051498413085938,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testMaxInit"
}{
    "event": "test",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testMaxInit",
    "status": "pass",
    "time": 0.0023708343505859,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "tests": 12
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure",
    "status": "error",
    "time": 0.0025370121002197,
    "trace": [
        {
            "file": "\/path\/to\/build\/src\/Money.php",
            "line": 320
        },
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 15,
            "function": "divide",
            "class": "Money\\Money",
            "type": "->"
        }
    ],
    "message": "Division by zero",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure2"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure2",
    "status": "fail",
    "time": 0.008944034576416,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 20,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Failed asserting that two objects are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testIncomplete"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testIncomplete",
    "status": "error",
    "time": 0.0074319839477539,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 25,
            "function": "markTestIncomplete",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Incomplete Test: No yet finished...",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure3"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure3",
    "status": "fail",
    "time": 0.0014960765838623,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 30,
            "function": "assertEquals",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Failed asserting that two arrays are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure4"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure4",
    "status": "fail",
    "time": 0.0023319721221924,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 35,
            "function": "assertTrue",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Failed asserting that false is true.",
    "output": "some output\nfrom f4"
}{
    "event": "suiteStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testFailure5",
    "tests": 3
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testFailure5",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure5 with data set #0 (1, 2, 3, 4, 5, 6)"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest::testFailure5",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure5 with data set #0 (1, 2, 3, 4, 5, 6)",
    "status": "fail",
    "time": 0.0025498867034912,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 43,
            "function": "assertSame",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Failed asserting that 3 is identical to 1.",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testFailure5",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure5 with data set #1 ('one', 'two', 'three', 'four', 'five', 'six')"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest::testFailure5",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure5 with data set #1 ('one', 'two', 'three', 'four', 'five', 'six')",
    "status": "fail",
    "time": 0.00087904930114746,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 43,
            "function": "assertSame",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Failed asserting that two strings are identical.",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testFailure5",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure5 with data set #2 (array(1, 'one'), array(2, 'two'), array(3, 'three'), array(4, 'four'), array(5, 'five'), array(6, 'six'))"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest::testFailure5",
    "test": "ExampleResults\\ExampleFailuresTest::testFailure5 with data set #2 (array(1, 'one'), array(2, 'two'), array(3, 'three'), array(4, 'four'), array(5, 'five'), array(6, 'six'))",
    "status": "fail",
    "time": 0.0010340213775635,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 43,
            "function": "assertSame",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Failed asserting that Array &0 (\n    0 => 3\n    1 => 'three'\n) is identical to Array &0 (\n    0 => 1\n    1 => 'one'\n).",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testSkipped",
    "tests": 3
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testSkipped",
    "test": "ExampleResults\\ExampleFailuresTest::testSkipped with data set #0 (1, 2, 3, 4, 5, 6)"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest::testSkipped",
    "test": "ExampleResults\\ExampleFailuresTest::testSkipped with data set #0 (1, 2, 3, 4, 5, 6)",
    "status": "error",
    "time": 0.0041179656982422,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 51,
            "function": "markTestSkipped",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Skipped Test: This test is currently failing",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testSkipped",
    "test": "ExampleResults\\ExampleFailuresTest::testSkipped with data set #1 ('one', 'two', 'three', 'four', 'five', 'six')"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest::testSkipped",
    "test": "ExampleResults\\ExampleFailuresTest::testSkipped with data set #1 ('one', 'two', 'three', 'four', 'five', 'six')",
    "status": "error",
    "time": 0.00082302093505859,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 51,
            "function": "markTestSkipped",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Skipped Test: This test is currently failing",
    "output": ""
}{
    "event": "testStart",
    "suite": "ExampleResults\\ExampleFailuresTest::testSkipped",
    "test": "ExampleResults\\ExampleFailuresTest::testSkipped with data set #2 (array(1, 'one'), array(2, 'two'), array(3, 'three'), array(4, 'four'), array(5, 'five'), array(6, 'six'))"
}{
    "event": "test",
    "suite": "ExampleResults\\ExampleFailuresTest::testSkipped",
    "test": "ExampleResults\\ExampleFailuresTest::testSkipped with data set #2 (array(1, 'one'), array(2, 'two'), array(3, 'three'), array(4, 'four'), array(5, 'five'), array(6, 'six'))",
    "status": "error",
    "time": 0.00070905685424805,
    "trace": [
        {
            "file": "\/path\/to\/build\/tests\/ExampleFailuresTest.php",
            "line": 51,
            "function": "markTestSkipped",
            "class": "PHPUnit_Framework_Assert",
            "type": "::"
        }
    ],
    "message": "Skipped Test: This test is currently failing",
    "output": ""
}{
    "event": "test",
    "suite": "",
    "test": "",
    "status": "error",
    "time": 0,
    "trace": [],
    "message": "Skipped Test: This test depends on \"ExampleResults\\ExampleFailuresTest::testFailure\" to pass.",
    "output": ""
}{
    "event": "testStart",
    "suite": "",
    "test": "ExampleResults\\ExampleFailuresTest::testOutput"
}{
    "event": "test",
    "suite": "",
    "test": "ExampleResults\\ExampleFailuresTest::testOutput",
    "status": "pass",
    "time": 0.0065488815307617,
    "trace": [],
    "message": "",
    "output": "has output\non lines"
}{
    "event": "testStart",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testFactoryMethods"
}{
    "event": "test",
    "suite": "Tests\\Money\\MoneyTest",
    "test": "Tests\\Money\\MoneyTest::testFactoryMethods",
    "status": "warning",
    "time": 0.06482195854187,
    "trace": [],
    "message": "Trying to @cover or @use not existing method \"Monies::test\".",
    "output": ""
}{
    "event": "suiteStart",
    "suite": "Tests\\IntlMoneyParserTest",
    "tests": 2
}{
    "event": "suiteStart",
    "suite": "Tests\\IntlMoneyParserTest::testIntlParser",
    "tests": 2
}{
    "event": "testStart",
    "suite": "Tests\\IntlMoneyParserTest::testIntlParser",
    "test": "Tests\\IntlMoneyParserTest::testIntlParser with data set #0 ('$1000.50', 100050)"
}{
    "event": "test",
    "suite": "Tests\\IntlMoneyParserTest::testIntlParser",
    "test": "Tests\\IntlMoneyParserTest::testIntlParser with data set #0 ('$1000.50', 100050)",
    "status": "pass",
    "time": 0.0069050788879395,
    "trace": [],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "Tests\\IntlMoneyParserTest::testIntlParser",
    "test": "Tests\\IntlMoneyParserTest::testIntlParser with data set #1 ('$1000.00', 100000)"
}{
    "event": "test",
    "suite": "Tests\\IntlMoneyParserTest::testIntlParser",
    "test": "Tests\\IntlMoneyParserTest::testIntlParser with data set #1 ('$1000.00', 100000)",
    "status": "pass",
    "time": 0.00067996978759766,
    "trace": [],
    "message": "",
    "output": ""
}
